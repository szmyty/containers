# syntax=docker/dockerfile:1

FROM debian:stable-20240513-slim

# Make a pipe fail on the first failure.
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# The user the app should run as.
ENV APP_USER=app

# The home directory.
ENV APP_DIR="/$APP_USER"

# Where persistent data (volume) should be stored.
ENV DATA_DIR="$APP_DIR/data"

# Where configuration should be stored.
ENV CONF_DIR="$APP_DIR/conf"

# Update base system.
# hadolint ignore=DL3018,DL3009,DL3008
RUN apt-get update \
  && apt-get install --yes --no-install-recommends ca-certificates \
  && apt-get clean \
  && find / -xdev -name '*apt*' -print0 | xargs --null rm --recursive --force

# Add custom user and set up home directory.
RUN adduser --shell /bin/true --uid 1000 --home "$APP_DIR" --gecos '' "$APP_USER" \
  && mkdir "$DATA_DIR" "$CONF_DIR" \
  && chown --recursive "$APP_USER" "$APP_DIR" "$CONF_DIR" \
  && chmod 700 "$APP_DIR" "$DATA_DIR" "$CONF_DIR"

# Remove existing crontabs, if any.
RUN rm --force --recursive /var/spool/cron \
  && rm --force --recursive /etc/crontabs \
  && rm --force --recursive /etc/periodic

# Remove all but a handful of admin commands.
RUN find /sbin /usr/sbin \
  ! -type d -a ! -name apk -a ! -name ln \
  -delete

# Remove world-writeable permissions except for /tmp/.
RUN find / -xdev -type d -perm /0002 -exec chmod o-w {} + \
  && find / -xdev -type f -perm /0002 -exec chmod o-w {} + \
  && chmod 777 /tmp/ \
  && chown "$APP_USER":root /tmp/

# Remove unnecessary accounts, excluding current app user and root.
RUN sed --in-place --regexp-extended "/^($APP_USER|root|nobody)/!d" /etc/group \
  && sed --in-place --regexp-extended "/^($APP_USER|root|nobody)/!d" /etc/passwd

# Remove interactive login shell for everybody.
RUN sed --in-place --regexp-extended 's#^(.*):[^:]*$#\1:/sbin/nologin#' /etc/passwd

# Disable password login for everybody.
RUN while IFS=: read -r username _; do passwd --lock "$username"; done < /etc/passwd || true

# Remove temp shadow, passwd, group.
RUN find /bin /etc /lib /sbin /usr -xdev -type f -regex '.*-$' -exec rm --force {} +

# Ensure system dirs are owned by root and not writable by anybody else.
RUN find /bin /etc /lib /sbin /usr -xdev -type d \
  -exec chown root:root {} \; \
  -exec chmod 0755 {} \;

# Remove suid & sgid files.
RUN find /bin /etc /lib /sbin /usr -xdev -type f -a \( -perm /4000 -o -perm /2000 \) -delete

# Remove dangerous commands.
RUN find /bin /etc /lib /sbin /usr -xdev \( \
  -name hexdump -o \
  -name chgrp -o \
  -name chown -o \
  -name ln -o \
  -name od -o \
  -name strings -o \
  -name su -o \
  -name sudo \
  \) -delete

# Remove init scripts since we do not use them.
RUN rm --force --recursive /etc/init.d /lib/rc /etc/conf.d /etc/inittab /etc/runlevels /etc/rc.conf /etc/logrotate.d

# Remove kernel tunables.
RUN rm --force --recursive /etc/sysctl* /etc/modprobe.d /etc/modules /etc/mdev.conf /etc/acpi

# Remove root home dir.
RUN rm --force --recursive /root

# Remove fstab.
RUN rm --force /etc/fstab

# Remove any symlinks that we broke during previous steps.
RUN find /bin /etc /lib /sbin /usr -xdev -type l -exec test ! -e {} \; -delete

# remove apt package manager
RUN find / -type f -iname '*apt*' -xdev -delete \
    && find / -type d -iname '*apt*' -print0 -xdev | xargs -0 rm -r --

# set rx to all directories, except data directory/
RUN find "$APP_DIR" -type d -exec chmod 500 {} +

# set r to all files
RUN find "$APP_DIR" -type f -exec chmod 400 {} +
RUN chmod -R u=rwx "$DATA_DIR/"

# chown all app files
RUN chown "$APP_USER":"$APP_USER" -R "$APP_DIR" "$DATA_DIR"

# Add default entrypoint script.
COPY entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/entrypoint.sh

# Add health check script.
COPY healthcheck.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/healthcheck.sh

# Add build package script.
COPY build-package.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/build-package.sh

# Default directory is /app.
WORKDIR "$APP_DIR"

# Set the default entrypoint.
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Define the default command.
CMD ["bash"]

# Define the healthcheck.
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 CMD ["/usr/local/bin/healthcheck.sh"]
